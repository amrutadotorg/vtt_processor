name: Build Cross-Platform Executables
on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            output_name: vtt_processor.exe
            asset_name: vtt_processor-windows
            pyinstaller_args: --onefile --windowed --name vtt_processor
          - os: macos-latest
            output_name: vtt_processor_mac
            asset_name: vtt_processor-macos
            pyinstaller_args: --onefile --windowed --name vtt_processor_mac
          - os: ubuntu-latest
            output_name: vtt_processor_linux
            asset_name: vtt_processor-linux
            pyinstaller_args: --onefile --windowed --name vtt_processor_linux
    
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build with PyInstaller
      run: pyinstaller ${{ matrix.pyinstaller_args }} --additional-hooks-dir=. vtt_processor.py
    
    - name: Create entitlements file for macOS
      if: matrix.os == 'macos-latest'
      run: |
        cat > entitlements.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <true/>
            <key>com.apple.security.cs.allow-jit</key>
            <true/>
            <key>com.apple.security.cs.disable-library-validation</key>
            <true/>
        </dict>
        </plist>
        EOF
    
    - name: Sign macOS app with entitlements
      if: matrix.os == 'macos-latest'
      run: |
        codesign --force --deep --entitlements entitlements.plist --sign - dist/${{ matrix.output_name }}
    
    - name: Set executable permissions
      if: matrix.os != 'windows-latest'
      run: chmod +x dist/${{ matrix.output_name }}
    
    - name: Create proper macOS application bundle
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p "VTT Processor.app/Contents/MacOS"
        cp dist/${{ matrix.output_name }} "VTT Processor.app/Contents/MacOS/VTT Processor"
        chmod +x "VTT Processor.app/Contents/MacOS/VTT Processor"
        
        # Create minimal Info.plist
        cat > "VTT Processor.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>VTT Processor</string>
            <key>CFBundleIdentifier</key>
            <string>com.yourcompany.vttprocessor</string>
            <key>CFBundleName</key>
            <string>VTT Processor</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.10</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF
        
        # Sign the app bundle
        codesign --force --deep --entitlements entitlements.plist --sign - "VTT Processor.app"
    
    - name: Create DMG for macOS
      if: matrix.os == 'macos-latest'
      run: |
        # Create temporary DMG
        hdiutil create -volname "VTT Processor" -srcfolder "VTT Processor.app" -ov -format UDRW temp.dmg
        
        # Mount the DMG
        device=$(hdiutil attach -readwrite -noverify -noautoopen temp.dmg | egrep '^/dev/' | sed 1q | awk '{print $1}')
        
        # Create .background folder and add Applications symlink
        mkdir -p "/Volumes/VTT Processor/.background"
        ln -s /Applications "/Volumes/VTT Processor/Applications"
        
        # Set permissions
        chmod -R 755 "/Volumes/VTT Processor/VTT Processor.app"
        
        # Create DS_Store with window layout settings
        sleep 5
        
        # Unmount
        hdiutil detach $device
        
        # Convert to final compressed DMG
        hdiutil convert temp.dmg -format UDZO -o "${{ matrix.asset_name }}.dmg"
        
        # Clean up
        rm temp.dmg
    
    - name: Upload macOS DMG artifact
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}-dmg
        path: ${{ matrix.asset_name }}.dmg
        
    - name: Upload non-macOS artifact
      if: matrix.os != 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.output_name }}
        
    - name: Create Release (macOS DMG)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'macos-latest'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ matrix.asset_name }}.dmg
        
    - name: Create Release (non-macOS)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os != 'macos-latest'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/${{ matrix.output_name }}
